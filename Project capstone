{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":2263110,"sourceType":"datasetVersion","datasetId":1362209},{"sourceId":4651275,"sourceType":"datasetVersion","datasetId":2702119},{"sourceId":4657262,"sourceType":"datasetVersion","datasetId":2702047},{"sourceId":4657744,"sourceType":"datasetVersion","datasetId":2704417},{"sourceId":4658400,"sourceType":"datasetVersion","datasetId":2704853}],"dockerImageVersionId":30301,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with my helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n#Question 1 -loading dataset\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2022-12-05T08:45:08.017783Z","iopub.execute_input":"2022-12-05T08:45:08.018308Z","iopub.status.idle":"2022-12-05T08:45:08.387757Z","shell.execute_reply.started":"2022-12-05T08:45:08.018268Z","shell.execute_reply":"2022-12-05T08:45:08.385691Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport cv2\nimport os\nimport numpy as np\nimport tensorflow as tf\nfrom keras.utils.np_utils import to_categorical\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense,Dropout,Activation,Flatten,Conv2D,MaxPooling2D\nfrom sklearn import preprocessing\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\n\nDIR=\"/kaggle/input/endang-training/train_data/archive/Danger Of Extinction/Danger Of Extinction\"\nCategories=[\"African_Elephant\",\"Amur_Leopard\",\"Arctic_Fox\",\"cheetahs\",\"Panda\",\"Chimpanzee\",\"Jaguars\",\"Lion\",\"Orangutan\",\"Panthers\",\"Rhino\"]\nfor c in Categories:\n    path=os.path.join(DIR,c,c,c)\n    for img in os.listdir(path):\n        img_array=cv2.imread(os.path.join(path,img),cv2.IMREAD_GRAYSCALE)\n        plt.imshow(img_array,cmap=\"gray\")\n        plt.show()\n        break\n    break","metadata":{"execution":{"iopub.status.busy":"2022-12-05T09:41:08.912711Z","iopub.execute_input":"2022-12-05T09:41:08.91312Z","iopub.status.idle":"2022-12-05T09:41:09.15029Z","shell.execute_reply.started":"2022-12-05T09:41:08.913089Z","shell.execute_reply":"2022-12-05T09:41:09.148717Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Q2\n#Creating training data\ntraining_data=[]\ndef create_training_data():\n    for c in Categories:\n        path=os.path.join(DIR,c,c,c)\n        class_num=Categories.index(c)\n        for img in os.listdir(path):\n            img_array=cv2.imread(os.path.join(path,img),cv2.IMREAD_GRAYSCALE)\n            new_array=cv2.resize(img_array,(50,50))\n            training_data.append([new_array,class_num])\n            \ncreate_training_data()\n","metadata":{"execution":{"iopub.status.busy":"2022-12-05T08:21:18.544345Z","iopub.execute_input":"2022-12-05T08:21:18.544813Z","iopub.status.idle":"2022-12-05T08:21:39.011821Z","shell.execute_reply.started":"2022-12-05T08:21:18.544775Z","shell.execute_reply":"2022-12-05T08:21:39.010748Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Q2\n#Creating Evaluation data\nDIR_2=\"/kaggle/input/endang-evaluation/eval_data\"\neval_data=[]\ndef create_eval_data():\n    for l in Categories:\n        path=os.path.join(DIR_2,l,l)\n        class_num=Categories.index(l)\n        for img in os.listdir(path):\n            img_array=cv2.imread(os.path.join(path,img),cv2.IMREAD_GRAYSCALE)\n            new_array=cv2.resize(img_array,(50,50))\n            eval_data.append([new_array,class_num])\n\ncreate_eval_data()","metadata":{"execution":{"iopub.status.busy":"2022-12-05T08:25:26.29514Z","iopub.execute_input":"2022-12-05T08:25:26.295662Z","iopub.status.idle":"2022-12-05T08:25:29.751246Z","shell.execute_reply.started":"2022-12-05T08:25:26.295622Z","shell.execute_reply":"2022-12-05T08:25:29.750277Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Q2\n#Creating Testing data\nDIR_3=\"/kaggle/input/endang-test/test_data\"\ntest_data=[]\ndef create_test_data():\n    for z in Categories:\n        path=os.path.join(DIR_3,z,z)\n        class_num=Categories.index(z)\n        for img in os.listdir(path):\n            img_array=cv2.imread(os.path.join(path,img),cv2.IMREAD_GRAYSCALE)\n            new_array=cv2.resize(img_array,(50,50))\n            test_data.append([new_array,class_num])\n\ncreate_test_data()\n","metadata":{"execution":{"iopub.status.busy":"2022-12-05T08:28:33.516031Z","iopub.execute_input":"2022-12-05T08:28:33.516615Z","iopub.status.idle":"2022-12-05T08:28:37.560924Z","shell.execute_reply.started":"2022-12-05T08:28:33.516575Z","shell.execute_reply":"2022-12-05T08:28:37.55996Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#extracting features and labels for training data\nX=[]\nY=[]\n\nfor features,label in training_data:\n    X.append(features)\n    Y.append(label)\n    \nX=np.array(X).reshape(-1,50,50,1)\nprint((X.shape[1:]))\nY=np.array(Y)\nY_oh=to_categorical(Y)\n\n","metadata":{"execution":{"iopub.status.busy":"2022-12-05T08:28:45.385318Z","iopub.execute_input":"2022-12-05T08:28:45.385843Z","iopub.status.idle":"2022-12-05T08:28:45.410057Z","shell.execute_reply.started":"2022-12-05T08:28:45.385806Z","shell.execute_reply":"2022-12-05T08:28:45.408396Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#extracting features and labels for evaluation data\nA=[]\nB=[]\n\nfor features,label in eval_data:\n    A.append(features)\n    B.append(label)\n    \nA=np.array(A).reshape(-1,50,50,1)\nB=np.array(B)\nB_oh=to_categorical(B)\n\n\n\n\n","metadata":{"execution":{"iopub.status.busy":"2022-12-05T08:28:48.181616Z","iopub.execute_input":"2022-12-05T08:28:48.182108Z","iopub.status.idle":"2022-12-05T08:28:48.193099Z","shell.execute_reply.started":"2022-12-05T08:28:48.182072Z","shell.execute_reply":"2022-12-05T08:28:48.191541Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#extracting features and labels for test data\nM=[]\nZ=[]\nfor features,label in test_data:\n    M.append(features)\n    Z.append(label)\n    \nM=np.array(M).reshape(-1,50,50,1)\nZ=np.array(Z)\nZ_oh=to_categorical(Z)\n","metadata":{"execution":{"iopub.status.busy":"2022-12-05T08:36:37.382811Z","iopub.execute_input":"2022-12-05T08:36:37.383305Z","iopub.status.idle":"2022-12-05T08:36:37.392355Z","shell.execute_reply.started":"2022-12-05T08:36:37.383269Z","shell.execute_reply":"2022-12-05T08:36:37.390795Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Question 4\n# setting threshold accuracy to 100%\nacc_thresh = 1\n\nclass thresh_Callback(tf.keras.callbacks.Callback): \n    def check_acc(self, epoch, logs={}): \n        if(logs.get('acc') == ACCURACY_THRESHOLD):      \n            self.model.stop_training = True","metadata":{"execution":{"iopub.status.busy":"2022-12-05T08:25:50.381807Z","iopub.execute_input":"2022-12-05T08:25:50.382423Z","iopub.status.idle":"2022-12-05T08:25:50.388441Z","shell.execute_reply.started":"2022-12-05T08:25:50.38239Z","shell.execute_reply":"2022-12-05T08:25:50.387474Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"callback=thresh_Callback()","metadata":{"execution":{"iopub.status.busy":"2022-12-05T08:25:51.919734Z","iopub.execute_input":"2022-12-05T08:25:51.920362Z","iopub.status.idle":"2022-12-05T08:25:51.925393Z","shell.execute_reply.started":"2022-12-05T08:25:51.920328Z","shell.execute_reply":"2022-12-05T08:25:51.924064Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Question 3\n#pre-trained model for training using CNNs\ntrain_data_q=X/255.0;\neval_data_q=A/255.0;\n\nmodel=Sequential()\nmodel.add(Conv2D(64,(3,3),activation='relu',input_shape=(50,50,1)))#Layer 1\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\nmodel.add(Conv2D(64,(3,3),activation='relu'))#layer 2\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\nmodel.add(Flatten())#converting 2D to 1D\nmodel.add(Dense(64))#Layer 3\n          \nmodel.add(Dense(11,activation='softmax')) #output layer\n\n          \nmodel.compile(loss=\"categorical_crossentropy\",optimizer=\"adam\",metrics=['accuracy'])\n\n#Question 5\n#Evaluation data on trained model          \nmodel.fit(train_data_q,Y_oh,epochs=10,validation_data=(eval_data_q,B_oh),callbacks=[callback])\n\n\n\n\n        \n          ","metadata":{"execution":{"iopub.status.busy":"2022-12-05T08:34:02.105551Z","iopub.execute_input":"2022-12-05T08:34:02.106675Z","iopub.status.idle":"2022-12-05T08:35:49.433542Z","shell.execute_reply.started":"2022-12-05T08:34:02.106621Z","shell.execute_reply":"2022-12-05T08:35:49.432175Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Question 5-Creating confusion matrix\nu=M/255.0\na=model.predict(u)\nh=np.round(a)\nprint(h)\nconf_m=confusion_matrix(Z_oh.argmax(axis=1),h.argmax(axis=1))\n\nfig, ax = plt.subplots(figsize=(7.5, 7.5))\nax.matshow(conf_m, cmap=plt.cm.Blues, alpha=0.3)\nfor i in range(conf_m.shape[0]):\n    for j in range(conf_m.shape[1]):\n        ax.text(x=j, y=i,s=conf_m[i, j], va='center', ha='center', size='xx-large') \nplt.xlabel('Predictions', fontsize=18)\nplt.ylabel('Actuals', fontsize=18)\nplt.title('Confusion Matrix', fontsize=18)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2022-12-05T12:04:01.264901Z","iopub.execute_input":"2022-12-05T12:04:01.26538Z","iopub.status.idle":"2022-12-05T12:04:02.204863Z","shell.execute_reply.started":"2022-12-05T12:04:01.265343Z","shell.execute_reply":"2022-12-05T12:04:02.203635Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Question 6 and 7\n\n#Loading model and allocating sensors\nTF_LITE_MODEL_FILE_NAME=\"tf_lite_model.tflite\"\n\ntf_lite_converter=tf.lite.TFLiteConverter.from_keras_model(model)\ntflite_model=tf_lite_converter.convert()\n\ntflite_model_name=TF_LITE_MODEL_FILE_NAME\nopen(tflite_model_name,\"wb\").write(tflite_model)\n\ninterpreter=tf.lite.Interpreter(model_path=TF_LITE_MODEL_FILE_NAME)\ninterpreter.allocate_tensors()\n\n#input and output tensors\ninput_details=interpreter.get_input_details()\noutput_details=interpreter.get_output_details()\n\nw=A.astype('float32')\nw=w/255\ninput_shape = input_details[0]['shape']\nacc=0\nfor i in range(len(w)):\n    input_data = w[i].reshape(input_shape)\n    interpreter.set_tensor(input_details[0]['index'], input_data)\n    interpreter.invoke()\n    output_data = interpreter.get_tensor(output_details[0]['index'])\n    if(np.argmax(output_data) == np.argmax(B_oh[i])):\n        acc+=1\nacc = acc/len(w)\nprint(acc*100)\n\n\n","metadata":{"execution":{"iopub.status.busy":"2022-12-05T12:07:33.011616Z","iopub.execute_input":"2022-12-05T12:07:33.01206Z","iopub.status.idle":"2022-12-05T12:07:35.607702Z","shell.execute_reply.started":"2022-12-05T12:07:33.012025Z","shell.execute_reply":"2022-12-05T12:07:35.606757Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"conf_m_2=confusion_matrix(Z_oh.argmax(axis=1),h.argmax(axis=1))\n\nfig, ax = plt.subplots(figsize=(7.5, 7.5))\nax.matshow(conf_m, cmap=plt.cm.Blues, alpha=0.3)\nfor i in range(conf_m.shape[0]):\n    for j in range(conf_m.shape[1]):\n        ax.text(x=j, y=i,s=conf_m[i, j], va='center', ha='center', size='xx-large')\nplt.xlabel('Predictions', fontsize=18)\nplt.ylabel('Actuals', fontsize=18)\nplt.title('Confusion Matrix', fontsize=18)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2022-12-05T12:04:23.353186Z","iopub.execute_input":"2022-12-05T12:04:23.353655Z","iopub.status.idle":"2022-12-05T12:04:24.036163Z","shell.execute_reply.started":"2022-12-05T12:04:23.353619Z","shell.execute_reply":"2022-12-05T12:04:24.03482Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Question 8\n#The accuracy produced from Quantized model is similar to the one produced by the pre-trained model,both have a value close to 54.7%.The time taken by the quantized model is less","metadata":{},"execution_count":null,"outputs":[]}]}